======================
The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
---------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

#test creation my_geo
>>> my_geo = BaseGeometry()
>>> isinstance(my_geo, BaseGeometry)
True

#test with 0
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator("name", 0)
Traceback (most recent call last):
...
ValueError: <name> must be greater than 0

#test with None
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator("name", None)
Traceback (most recent call last):
...
TypeError: <name> must be an integer

#test with One Args
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator("name")
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

#test with No Args
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator()
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

#test with negative value
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator("name", -4)
Traceback (most recent call last):
...
ValueError: <name> must be greater than 0

#test with valid value
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator("name", 4)

#test with empty name
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator("", 4)

#test with with None name
>>> my_geo = BaseGeometry()
>>> my_geo.integer_validator(None, 4)